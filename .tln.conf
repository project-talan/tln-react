module.exports = {
  tags: async (tln) => [],
  dotenvs: async (tln) => ['.env'],
  env: async (tln, env) => {},
  options: async (tln) => {},
  inherits: async (tln) => ['react', 'nginx', 'docker'],
  depends: async (tln) => ['node-16.7.0'],
  steps: async (tln) => [],
  components: async (tln) => []
}
/*
    {
      id: 'build-docker',
      builder: async (tln, script) => {
        let conf = ['envsubst "\\${TLN_COMPONENT_PARAM_HOST}" > ./target/conf.d/default.conf < ./default.conf.template'];
        if(script.env.TLN_REACT_SSL_CERT) {
          conf = [
            'envsubst "\\${TLN_COMPONENT_UID} \\${TLN_COMPONENT_PARAM_HOST}" > ./target/conf.d/default.conf < ./default.conf.https.template',
            'cp -r ./ssl ./target/'
          ];
        }

        script.set([
          'rm -rf ./target || true',
          'mkdir target',
          'mkdir target/conf.d'].
          concat(conf).
          concat([
            'docker build \\',
            '  -t ${TLN_COMPONENT_UID}:${TLN_COMPONENT_VERSION} .'
          ])
        )
      }
    },
    {
      id: 'run-docker',
      builder: async (tln, script) => {
        script.set([
          'docker run -d --rm \\',
          '  -p ${TLN_COMPONENT_PARAM_PORT}:80 \\',
          '  -p ${TLN_COMPONENT_PARAM_PORTS}:443 \\',
          '  --name ${TLN_COMPONENT_UID} ${TLN_COMPONENT_UID}:${TLN_COMPONENT_VERSION}'
        ])
      }
    }

*/